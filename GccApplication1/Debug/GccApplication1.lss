
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fc  00800130  00800130  000011a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9f  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6a  00000000  00000000  00002fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000985  00000000  00000000  00003b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00004498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080b  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac7  00000000  00000000  00004f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000059da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__ctors_end>
       4:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
       8:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
       c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      10:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      14:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      1c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      20:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      24:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      28:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      2c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      30:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      34:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      38:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      3c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      40:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      44:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      48:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      4c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      50:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      54:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      58:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      5c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      60:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      64:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      68:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      6c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      70:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      74:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      78:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      7c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      80:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      84:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      88:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      8c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      90:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      94:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      98:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      9c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      a0:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      a4:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      a8:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      ac:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      b0:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	00 5f       	subi	r16, 0xF0	; 240
      bc:	00 00       	nop
      be:	00 07       	cpc	r16, r16
      c0:	00 07       	cpc	r16, r16
      c2:	00 14       	cp	r0, r0
      c4:	7f 14       	cp	r7, r15
      c6:	7f 14       	cp	r7, r15
      c8:	24 2a       	or	r2, r20
      ca:	7f 2a       	or	r7, r31
      cc:	12 23       	and	r17, r18
      ce:	13 08       	sbc	r1, r3
      d0:	64 62       	ori	r22, 0x24	; 36
      d2:	36 49       	sbci	r19, 0x96	; 150
      d4:	55 22       	and	r5, r21
      d6:	50 00       	.word	0x0050	; ????
      d8:	05 03       	mulsu	r16, r21
      da:	00 00       	nop
      dc:	00 1c       	adc	r0, r0
      de:	22 41       	sbci	r18, 0x12	; 18
      e0:	00 00       	nop
      e2:	41 22       	and	r4, r17
      e4:	1c 00       	.word	0x001c	; ????
      e6:	14 08       	sbc	r1, r4
      e8:	3e 08       	sbc	r3, r14
      ea:	14 08       	sbc	r1, r4
      ec:	08 3e       	cpi	r16, 0xE8	; 232
      ee:	08 08       	sbc	r0, r8
      f0:	00 50       	subi	r16, 0x00	; 0
      f2:	30 00       	.word	0x0030	; ????
      f4:	00 08       	sbc	r0, r0
      f6:	08 08       	sbc	r0, r8
      f8:	08 08       	sbc	r0, r8
      fa:	00 60       	ori	r16, 0x00	; 0
      fc:	60 00       	.word	0x0060	; ????
      fe:	00 20       	and	r0, r0
     100:	10 08       	sbc	r1, r0
     102:	04 02       	muls	r16, r20
     104:	3e 51       	subi	r19, 0x1E	; 30
     106:	49 45       	sbci	r20, 0x59	; 89
     108:	3e 00       	.word	0x003e	; ????
     10a:	42 7f       	andi	r20, 0xF2	; 242
     10c:	40 00       	.word	0x0040	; ????
     10e:	42 61       	ori	r20, 0x12	; 18
     110:	51 49       	sbci	r21, 0x91	; 145
     112:	46 21       	and	r20, r6
     114:	41 45       	sbci	r20, 0x51	; 81
     116:	4b 31       	cpi	r20, 0x1B	; 27
     118:	18 14       	cp	r1, r8
     11a:	12 7f       	andi	r17, 0xF2	; 242
     11c:	10 27       	eor	r17, r16
     11e:	45 45       	sbci	r20, 0x55	; 85
     120:	45 39       	cpi	r20, 0x95	; 149
     122:	3c 4a       	sbci	r19, 0xAC	; 172
     124:	49 49       	sbci	r20, 0x99	; 153
     126:	30 01       	movw	r6, r0
     128:	71 09       	sbc	r23, r1
     12a:	05 03       	mulsu	r16, r21
     12c:	36 49       	sbci	r19, 0x96	; 150
     12e:	49 49       	sbci	r20, 0x99	; 153
     130:	36 06       	cpc	r3, r22
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	29 1e       	adc	r2, r25
     136:	00 36       	cpi	r16, 0x60	; 96
     138:	36 00       	.word	0x0036	; ????
     13a:	00 00       	nop
     13c:	56 36       	cpi	r21, 0x66	; 102
     13e:	00 00       	nop
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	00 14       	cp	r0, r0
     146:	14 14       	cp	r1, r4
     148:	14 14       	cp	r1, r4
     14a:	00 41       	sbci	r16, 0x10	; 16
     14c:	22 14       	cp	r2, r2
     14e:	08 02       	muls	r16, r24
     150:	01 51       	subi	r16, 0x11	; 17
     152:	09 06       	cpc	r0, r25
     154:	32 49       	sbci	r19, 0x92	; 146
     156:	79 41       	sbci	r23, 0x19	; 25
     158:	3e 7e       	andi	r19, 0xEE	; 238
     15a:	11 11       	cpse	r17, r1
     15c:	11 7e       	andi	r17, 0xE1	; 225
     15e:	7f 49       	sbci	r23, 0x9F	; 159
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	36 3e       	cpi	r19, 0xE6	; 230
     164:	41 41       	sbci	r20, 0x11	; 17
     166:	41 22       	and	r4, r17
     168:	7f 41       	sbci	r23, 0x1F	; 31
     16a:	41 22       	and	r4, r17
     16c:	1c 7f       	andi	r17, 0xFC	; 252
     16e:	49 49       	sbci	r20, 0x99	; 153
     170:	49 41       	sbci	r20, 0x19	; 25
     172:	7f 09       	sbc	r23, r15
     174:	09 09       	sbc	r16, r9
     176:	01 3e       	cpi	r16, 0xE1	; 225
     178:	41 49       	sbci	r20, 0x91	; 145
     17a:	49 7a       	andi	r20, 0xA9	; 169
     17c:	7f 08       	sbc	r7, r15
     17e:	08 08       	sbc	r0, r8
     180:	7f 00       	.word	0x007f	; ????
     182:	41 7f       	andi	r20, 0xF1	; 241
     184:	41 00       	.word	0x0041	; ????
     186:	20 40       	sbci	r18, 0x00	; 0
     188:	41 3f       	cpi	r20, 0xF1	; 241
     18a:	01 7f       	andi	r16, 0xF1	; 241
     18c:	08 14       	cp	r0, r8
     18e:	22 41       	sbci	r18, 0x12	; 18
     190:	7f 40       	sbci	r23, 0x0F	; 15
     192:	40 40       	sbci	r20, 0x00	; 0
     194:	40 7f       	andi	r20, 0xF0	; 240
     196:	02 0c       	add	r0, r2
     198:	02 7f       	andi	r16, 0xF2	; 242
     19a:	7f 04       	cpc	r7, r15
     19c:	08 10       	cpse	r0, r8
     19e:	7f 3e       	cpi	r23, 0xEF	; 239
     1a0:	41 41       	sbci	r20, 0x11	; 17
     1a2:	41 3e       	cpi	r20, 0xE1	; 225
     1a4:	7f 09       	sbc	r23, r15
     1a6:	09 09       	sbc	r16, r9
     1a8:	06 3e       	cpi	r16, 0xE6	; 230
     1aa:	41 51       	subi	r20, 0x11	; 17
     1ac:	21 5e       	subi	r18, 0xE1	; 225
     1ae:	7f 09       	sbc	r23, r15
     1b0:	19 29       	or	r17, r9
     1b2:	46 46       	sbci	r20, 0x66	; 102
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	49 31       	cpi	r20, 0x19	; 25
     1b8:	01 01       	movw	r0, r2
     1ba:	7f 01       	movw	r14, r30
     1bc:	01 3f       	cpi	r16, 0xF1	; 241
     1be:	40 40       	sbci	r20, 0x00	; 0
     1c0:	40 3f       	cpi	r20, 0xF0	; 240
     1c2:	1f 20       	and	r1, r15
     1c4:	40 20       	and	r4, r0
     1c6:	1f 3f       	cpi	r17, 0xFF	; 255
     1c8:	40 38       	cpi	r20, 0x80	; 128
     1ca:	40 3f       	cpi	r20, 0xF0	; 240
     1cc:	63 14       	cp	r6, r3
     1ce:	08 14       	cp	r0, r8
     1d0:	63 07       	cpc	r22, r19
     1d2:	08 70       	andi	r16, 0x08	; 8
     1d4:	08 07       	cpc	r16, r24
     1d6:	61 51       	subi	r22, 0x11	; 17
     1d8:	49 45       	sbci	r20, 0x59	; 89
     1da:	43 00       	.word	0x0043	; ????
     1dc:	7f 41       	sbci	r23, 0x1F	; 31
     1de:	41 00       	.word	0x0041	; ????
     1e0:	02 04       	cpc	r0, r2
     1e2:	08 10       	cpse	r0, r8
     1e4:	20 00       	.word	0x0020	; ????
     1e6:	41 41       	sbci	r20, 0x11	; 17
     1e8:	7f 00       	.word	0x007f	; ????
     1ea:	04 02       	muls	r16, r20
     1ec:	01 02       	muls	r16, r17
     1ee:	04 40       	sbci	r16, 0x04	; 4
     1f0:	40 40       	sbci	r20, 0x00	; 0
     1f2:	40 40       	sbci	r20, 0x00	; 0
     1f4:	00 01       	movw	r0, r0
     1f6:	02 04       	cpc	r0, r2
     1f8:	00 20       	and	r0, r0
     1fa:	54 54       	subi	r21, 0x44	; 68
     1fc:	54 78       	andi	r21, 0x84	; 132
     1fe:	7f 48       	sbci	r23, 0x8F	; 143
     200:	44 44       	sbci	r20, 0x44	; 68
     202:	38 38       	cpi	r19, 0x88	; 136
     204:	44 44       	sbci	r20, 0x44	; 68
     206:	44 20       	and	r4, r4
     208:	38 44       	sbci	r19, 0x48	; 72
     20a:	44 48       	sbci	r20, 0x84	; 132
     20c:	7f 38       	cpi	r23, 0x8F	; 143
     20e:	54 54       	subi	r21, 0x44	; 68
     210:	54 18       	sub	r5, r4
     212:	08 7e       	andi	r16, 0xE8	; 232
     214:	09 01       	movw	r0, r18
     216:	02 0c       	add	r0, r2
     218:	52 52       	subi	r21, 0x22	; 34
     21a:	52 3e       	cpi	r21, 0xE2	; 226
     21c:	7f 08       	sbc	r7, r15
     21e:	04 04       	cpc	r0, r4
     220:	78 00       	.word	0x0078	; ????
     222:	44 7d       	andi	r20, 0xD4	; 212
     224:	40 00       	.word	0x0040	; ????
     226:	20 40       	sbci	r18, 0x00	; 0
     228:	44 3d       	cpi	r20, 0xD4	; 212
     22a:	00 7f       	andi	r16, 0xF0	; 240
     22c:	10 28       	or	r1, r0
     22e:	44 00       	.word	0x0044	; ????
     230:	00 41       	sbci	r16, 0x10	; 16
     232:	7f 40       	sbci	r23, 0x0F	; 15
     234:	00 7c       	andi	r16, 0xC0	; 192
     236:	04 18       	sub	r0, r4
     238:	04 78       	andi	r16, 0x84	; 132
     23a:	7c 08       	sbc	r7, r12
     23c:	04 04       	cpc	r0, r4
     23e:	78 38       	cpi	r23, 0x88	; 136
     240:	44 44       	sbci	r20, 0x44	; 68
     242:	44 38       	cpi	r20, 0x84	; 132
     244:	7c 14       	cp	r7, r12
     246:	14 14       	cp	r1, r4
     248:	08 08       	sbc	r0, r8
     24a:	14 14       	cp	r1, r4
     24c:	18 7c       	andi	r17, 0xC8	; 200
     24e:	7c 08       	sbc	r7, r12
     250:	04 04       	cpc	r0, r4
     252:	08 48       	sbci	r16, 0x88	; 136
     254:	54 54       	subi	r21, 0x44	; 68
     256:	54 20       	and	r5, r4
     258:	04 3f       	cpi	r16, 0xF4	; 244
     25a:	44 40       	sbci	r20, 0x04	; 4
     25c:	20 3c       	cpi	r18, 0xC0	; 192
     25e:	40 40       	sbci	r20, 0x00	; 0
     260:	20 7c       	andi	r18, 0xC0	; 192
     262:	1c 20       	and	r1, r12
     264:	40 20       	and	r4, r0
     266:	1c 3c       	cpi	r17, 0xCC	; 204
     268:	40 30       	cpi	r20, 0x00	; 0
     26a:	40 3c       	cpi	r20, 0xC0	; 192
     26c:	44 28       	or	r4, r4
     26e:	10 28       	or	r1, r0
     270:	44 0c       	add	r4, r4
     272:	50 50       	subi	r21, 0x00	; 0
     274:	50 3c       	cpi	r21, 0xC0	; 192
     276:	44 64       	ori	r20, 0x44	; 68
     278:	54 4c       	sbci	r21, 0xC4	; 196
     27a:	44 00       	.word	0x0044	; ????
     27c:	08 36       	cpi	r16, 0x68	; 104
     27e:	41 00       	.word	0x0041	; ????
     280:	00 00       	nop
     282:	7f 00       	.word	0x007f	; ????
     284:	00 00       	nop
     286:	41 36       	cpi	r20, 0x61	; 97
     288:	08 00       	.word	0x0008	; ????
     28a:	10 08       	sbc	r1, r0
     28c:	08 10       	cpse	r0, r8
     28e:	08 00       	.word	0x0008	; ????
     290:	00 00       	nop
	...

00000294 <__ctors_end>:
     294:	11 24       	eor	r1, r1
     296:	1f be       	out	0x3f, r1	; 63
     298:	cf ef       	ldi	r28, 0xFF	; 255
     29a:	d8 e0       	ldi	r29, 0x08	; 8
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	cd bf       	out	0x3d, r28	; 61

000002a0 <__do_copy_data>:
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b1 e0       	ldi	r27, 0x01	; 1
     2a6:	ee ed       	ldi	r30, 0xDE	; 222
     2a8:	f0 e1       	ldi	r31, 0x10	; 16
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x10>
     2ac:	05 90       	lpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	a0 33       	cpi	r26, 0x30	; 48
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0xc>

000002b6 <__do_clear_bss>:
     2b6:	23 e0       	ldi	r18, 0x03	; 3
     2b8:	a0 e3       	ldi	r26, 0x30	; 48
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	ac 32       	cpi	r26, 0x2C	; 44
     2c2:	b2 07       	cpc	r27, r18
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
     2ca:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

000002ce <__bad_interrupt>:
     2ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d2 <_ZN3LCD8setPixelEhhh>:
void LCD::setPower(uint8_t on) {
	writeCmd(on ? 0x20 : 0x24);
}

void LCD::setPixel(uint8_t x, uint8_t y, uint8_t value) {
	uint8_t &byte = SCREEN[y/8*84+x];
     2d2:	34 2f       	mov	r19, r20
     2d4:	36 95       	lsr	r19
     2d6:	36 95       	lsr	r19
     2d8:	36 95       	lsr	r19
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	54 e5       	ldi	r21, 0x54	; 84
     2de:	35 9f       	mul	r19, r21
     2e0:	60 0d       	add	r22, r0
     2e2:	71 1d       	adc	r23, r1
     2e4:	11 24       	eor	r1, r1
	if (value) byte |= (1<<(y%8));
     2e6:	22 23       	and	r18, r18
     2e8:	79 f0       	breq	.+30     	; 0x308 <_ZN3LCD8setPixelEhhh+0x36>
     2ea:	47 70       	andi	r20, 0x07	; 7
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_ZN3LCD8setPixelEhhh+0x24>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	4a 95       	dec	r20
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_ZN3LCD8setPixelEhhh+0x20>
     2fa:	fc 01       	movw	r30, r24
     2fc:	e6 0f       	add	r30, r22
     2fe:	f7 1f       	adc	r31, r23
     300:	80 81       	ld	r24, Z
     302:	28 2b       	or	r18, r24
     304:	20 83       	st	Z, r18
     306:	08 95       	ret
	else byte &= ~(1<<(y%8));
     308:	47 70       	andi	r20, 0x07	; 7
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <_ZN3LCD8setPixelEhhh+0x42>
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	4a 95       	dec	r20
     316:	e2 f7       	brpl	.-8      	; 0x310 <_ZN3LCD8setPixelEhhh+0x3e>
     318:	fc 01       	movw	r30, r24
     31a:	e6 0f       	add	r30, r22
     31c:	f7 1f       	adc	r31, r23
     31e:	20 95       	com	r18
     320:	80 81       	ld	r24, Z
     322:	28 23       	and	r18, r24
     324:	20 83       	st	Z, r18
     326:	08 95       	ret

00000328 <_ZN3LCD9writeCharEch>:
}
void LCD::writeChar(char code,uint8_t scale) {
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	c6 2e       	mov	r12, r22
     33c:	d4 2e       	mov	r13, r20
	uint8_t x,y;
	for(x=0;x<5*scale;x++) {
     33e:	e1 2c       	mov	r14, r1
     340:	0d 2d       	mov	r16, r13
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	c8 01       	movw	r24, r16
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	80 0f       	add	r24, r16
     350:	91 1f       	adc	r25, r17
     352:	2e 2d       	mov	r18, r14
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	28 17       	cp	r18, r24
     358:	39 07       	cpc	r19, r25
     35a:	0c f0       	brlt	.+2      	; 0x35e <_ZN3LCD9writeCharEch+0x36>
     35c:	4b c0       	rjmp	.+150    	; 0x3f4 <_ZN3LCD9writeCharEch+0xcc>
     35e:	f1 2c       	mov	r15, r1
		for(y=0;y<7*scale;y++) {
     360:	c8 01       	movw	r24, r16
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	80 1b       	sub	r24, r16
     370:	91 0b       	sbc	r25, r17
     372:	2f 2d       	mov	r18, r15
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	28 17       	cp	r18, r24
     378:	39 07       	cpc	r19, r25
     37a:	d4 f5       	brge	.+116    	; 0x3f0 <_ZN3LCD9writeCharEch+0xc8>
			if(pgm_read_byte(&CHARSET[code-32][x/scale]) & (1<<y/scale)) setPixel(CURSOR_X+x,CURSOR_Y+y,1);
     37c:	2c 2d       	mov	r18, r12
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	20 52       	subi	r18, 0x20	; 32
     382:	31 09       	sbc	r19, r1
     384:	8e 2d       	mov	r24, r14
     386:	6d 2d       	mov	r22, r13
     388:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmodqi4>
     38c:	f9 01       	movw	r30, r18
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	e2 0f       	add	r30, r18
     398:	f3 1f       	adc	r31, r19
     39a:	e8 0f       	add	r30, r24
     39c:	f1 1d       	adc	r31, r1
     39e:	ec 54       	subi	r30, 0x4C	; 76
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	e4 91       	lpm	r30, Z
     3a4:	8f 2d       	mov	r24, r15
     3a6:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmodqi4>
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <_ZN3LCD9writeCharEch+0x8a>
     3ae:	f5 95       	asr	r31
     3b0:	e7 95       	ror	r30
     3b2:	8a 95       	dec	r24
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <_ZN3LCD9writeCharEch+0x86>
     3b6:	e0 ff       	sbrs	r30, 0
     3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <_ZN3LCD9writeCharEch+0xac>
     3ba:	fe 01       	movw	r30, r28
     3bc:	e7 50       	subi	r30, 0x07	; 7
     3be:	fe 4f       	sbci	r31, 0xFE	; 254
     3c0:	40 81       	ld	r20, Z
     3c2:	4f 0d       	add	r20, r15
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	60 81       	ld	r22, Z
     3c8:	6e 0d       	add	r22, r14
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	ce 01       	movw	r24, r28
     3ce:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
     3d2:	0c c0       	rjmp	.+24     	; 0x3ec <_ZN3LCD9writeCharEch+0xc4>
			else setPixel(CURSOR_X+x,CURSOR_Y+y,0);
     3d4:	fe 01       	movw	r30, r28
     3d6:	e7 50       	subi	r30, 0x07	; 7
     3d8:	fe 4f       	sbci	r31, 0xFE	; 254
     3da:	40 81       	ld	r20, Z
     3dc:	4f 0d       	add	r20, r15
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	60 81       	ld	r22, Z
     3e2:	6e 0d       	add	r22, r14
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	ce 01       	movw	r24, r28
     3e8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
	else byte &= ~(1<<(y%8));
}
void LCD::writeChar(char code,uint8_t scale) {
	uint8_t x,y;
	for(x=0;x<5*scale;x++) {
		for(y=0;y<7*scale;y++) {
     3ec:	f3 94       	inc	r15
     3ee:	b8 cf       	rjmp	.-144    	; 0x360 <_ZN3LCD9writeCharEch+0x38>
	if (value) byte |= (1<<(y%8));
	else byte &= ~(1<<(y%8));
}
void LCD::writeChar(char code,uint8_t scale) {
	uint8_t x,y;
	for(x=0;x<5*scale;x++) {
     3f0:	e3 94       	inc	r14
     3f2:	a6 cf       	rjmp	.-180    	; 0x340 <_ZN3LCD9writeCharEch+0x18>
		for(y=0;y<7*scale;y++) {
			if(pgm_read_byte(&CHARSET[code-32][x/scale]) & (1<<y/scale)) setPixel(CURSOR_X+x,CURSOR_Y+y,1);
			else setPixel(CURSOR_X+x,CURSOR_Y+y,0);
		}
	}
	CURSOR_X += 5*scale+1;
     3f4:	8d 2d       	mov	r24, r13
     3f6:	88 0f       	add	r24, r24
     3f8:	88 0f       	add	r24, r24
     3fa:	8d 0d       	add	r24, r13
     3fc:	fe 01       	movw	r30, r28
     3fe:	e8 50       	subi	r30, 0x08	; 8
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	90 81       	ld	r25, Z
     404:	89 0f       	add	r24, r25
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	80 83       	st	Z, r24
	if(CURSOR_X >= 84) {CURSOR_X = 0;CURSOR_Y+=7*scale+1;}
     40a:	84 35       	cpi	r24, 0x54	; 84
     40c:	60 f0       	brcs	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     40e:	10 82       	st	Z, r1
     410:	31 96       	adiw	r30, 0x01	; 1
     412:	8d 2d       	mov	r24, r13
     414:	88 0f       	add	r24, r24
     416:	88 0f       	add	r24, r24
     418:	88 0f       	add	r24, r24
     41a:	98 2f       	mov	r25, r24
     41c:	9d 19       	sub	r25, r13
     41e:	80 81       	ld	r24, Z
     420:	89 0f       	add	r24, r25
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	80 83       	st	Z, r24
	if(CURSOR_Y >= 48) {CURSOR_X = 0;CURSOR_Y=0;}
     426:	fe 01       	movw	r30, r28
     428:	e7 50       	subi	r30, 0x07	; 7
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	80 81       	ld	r24, Z
     42e:	80 33       	cpi	r24, 0x30	; 48
     430:	28 f0       	brcs	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	10 82       	st	Z, r1
     436:	c7 50       	subi	r28, 0x07	; 7
     438:	de 4f       	sbci	r29, 0xFE	; 254
     43a:	18 82       	st	Y, r1
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	08 95       	ret

0000044e <_ZN3LCD11writeStringEPch>:
void LCD::writeString(char s[], uint8_t scale) {
     44e:	cf 92       	push	r12
     450:	df 92       	push	r13
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	6c 01       	movw	r12, r24
     45e:	8b 01       	movw	r16, r22
     460:	f4 2e       	mov	r15, r20
	int i=0;
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	d0 e0       	ldi	r29, 0x00	; 0
	while(s[i]) {
     466:	f8 01       	movw	r30, r16
     468:	ec 0f       	add	r30, r28
     46a:	fd 1f       	adc	r31, r29
     46c:	60 81       	ld	r22, Z
     46e:	66 23       	and	r22, r22
     470:	31 f0       	breq	.+12     	; 0x47e <_ZN3LCD11writeStringEPch+0x30>
		writeChar(s[i],scale);
     472:	4f 2d       	mov	r20, r15
     474:	c6 01       	movw	r24, r12
     476:	0e 94 94 01 	call	0x328	; 0x328 <_ZN3LCD9writeCharEch>
		i++;
     47a:	21 96       	adiw	r28, 0x01	; 1
	if(CURSOR_X >= 84) {CURSOR_X = 0;CURSOR_Y+=7*scale+1;}
	if(CURSOR_Y >= 48) {CURSOR_X = 0;CURSOR_Y=0;}
}
void LCD::writeString(char s[], uint8_t scale) {
	int i=0;
	while(s[i]) {
     47c:	f4 cf       	rjmp	.-24     	; 0x466 <_ZN3LCD11writeStringEPch+0x18>
		i++;
	}
	/*for(uint8_t i=0;i<len;i++) {
		writeChar(s[i],scale);
	}*/
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <_ZN3LCD9setCursorEhh>:

void LCD::setCursor(uint8_t x, uint8_t y) {
	CURSOR_X = x;
     48e:	fc 01       	movw	r30, r24
     490:	e8 50       	subi	r30, 0x08	; 8
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	60 83       	st	Z, r22
	CURSOR_Y = y;
     496:	31 96       	adiw	r30, 0x01	; 1
     498:	40 83       	st	Z, r20
     49a:	08 95       	ret

0000049c <_ZN3LCD5writeEhh>:
	for(int i=0;i<504;i++) {writeData(SCREEN[i]);}
}

void LCD::write(uint8_t bytes, uint8_t isdata) {
	//Enable controller
	PORTD &= ~(1<<LCD_SCE);
     49c:	8b b1       	in	r24, 0x0b	; 11
     49e:	8f 7e       	andi	r24, 0xEF	; 239
     4a0:	8b b9       	out	0x0b, r24	; 11

	//We are sending data
	if(isdata) PORTD |= (1<<LCD_DC); 
     4a2:	44 23       	and	r20, r20
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <_ZN3LCD5writeEhh+0x14>
     4a6:	8b b1       	in	r24, 0x0b	; 11
     4a8:	80 62       	ori	r24, 0x20	; 32
     4aa:	8b b9       	out	0x0b, r24	; 11

	//Write screen to display
	for(int i=0;i<504;i++) {writeData(SCREEN[i]);}
}

void LCD::write(uint8_t bytes, uint8_t isdata) {
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <_ZN3LCD5writeEhh+0x1c>
	PORTD &= ~(1<<LCD_SCE);

	//We are sending data
	if(isdata) PORTD |= (1<<LCD_DC); 
	//We are sending commands
	else PORTD &= ~(1<<LCD_DC);
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	8f 7d       	andi	r24, 0xDF	; 223
     4b4:	8b b9       	out	0x0b, r24	; 11
     4b6:	fa cf       	rjmp	.-12     	; 0x4ac <_ZN3LCD5writeEhh+0x10>

	//Send bytes
	for(unsigned char i=0;i<8;i++) {
     4b8:	88 30       	cpi	r24, 0x08	; 8
     4ba:	e0 f4       	brcc	.+56     	; 0x4f4 <_ZN3LCD5writeEhh+0x58>
		//Set data pin to byte state
		if((bytes>>(7-i)) & 0x01) PORTD |= (1<<LCD_DIN);
     4bc:	47 e0       	ldi	r20, 0x07	; 7
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	48 1b       	sub	r20, r24
     4c2:	51 09       	sbc	r21, r1
     4c4:	26 2f       	mov	r18, r22
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <_ZN3LCD5writeEhh+0x32>
     4ca:	35 95       	asr	r19
     4cc:	27 95       	ror	r18
     4ce:	4a 95       	dec	r20
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <_ZN3LCD5writeEhh+0x2e>
     4d2:	20 ff       	sbrs	r18, 0
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <_ZN3LCD5writeEhh+0x42>
     4d6:	9b b1       	in	r25, 0x0b	; 11
     4d8:	90 64       	ori	r25, 0x40	; 64
     4da:	9b b9       	out	0x0b, r25	; 11
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <_ZN3LCD5writeEhh+0x48>
		else PORTD &= ~(1<<LCD_DIN);
     4de:	9b b1       	in	r25, 0x0b	; 11
     4e0:	9f 7b       	andi	r25, 0xBF	; 191
     4e2:	9b b9       	out	0x0b, r25	; 11
		
		//Blink clock
		PORTD |= (1<<LCD_CLK);
     4e4:	9b b1       	in	r25, 0x0b	; 11
     4e6:	90 68       	ori	r25, 0x80	; 128
     4e8:	9b b9       	out	0x0b, r25	; 11
		PORTD &= ~(1<<LCD_CLK);
     4ea:	9b b1       	in	r25, 0x0b	; 11
     4ec:	9f 77       	andi	r25, 0x7F	; 127
     4ee:	9b b9       	out	0x0b, r25	; 11
	if(isdata) PORTD |= (1<<LCD_DC); 
	//We are sending commands
	else PORTD &= ~(1<<LCD_DC);

	//Send bytes
	for(unsigned char i=0;i<8;i++) {
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	e2 cf       	rjmp	.-60     	; 0x4b8 <_ZN3LCD5writeEhh+0x1c>
		PORTD |= (1<<LCD_CLK);
		PORTD &= ~(1<<LCD_CLK);
	}

	//Disable controller
	PORTD |= (1<<LCD_SCE);
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	80 61       	ori	r24, 0x10	; 16
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	08 95       	ret

000004fc <_ZN3LCD8writeCmdEh>:
}
void LCD::writeCmd(uint8_t cmd) {write(cmd,0);}
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN3LCD5writeEhh>
     502:	08 95       	ret

00000504 <_ZN3LCD5clearEv>:
	//Activate LCD
	writeCmd(0x08);
	writeCmd(0x0C);
}

void LCD::clear(void) {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
	//Set column and row to 0
	writeCmd(0x80);
     50a:	60 e8       	ldi	r22, 0x80	; 128
     50c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x40);
     510:	60 e4       	ldi	r22, 0x40	; 64
     512:	ce 01       	movw	r24, r28
     514:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	//Cursor too
	CURSOR_X = 0;
     518:	fe 01       	movw	r30, r28
     51a:	e8 50       	subi	r30, 0x08	; 8
     51c:	fe 4f       	sbci	r31, 0xFE	; 254
     51e:	10 82       	st	Z, r1
	CURSOR_Y = 0;
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	10 82       	st	Z, r1
	//Clear everything (504 bytes = 84cols * 48 rows / 8 bits)
	for(int i=0;i<504;i++) {SCREEN[i] = 0x00;}
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	88 3f       	cpi	r24, 0xF8	; 248
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	92 07       	cpc	r25, r18
     52e:	34 f4       	brge	.+12     	; 0x53c <_ZN3LCD5clearEv+0x38>
     530:	fe 01       	movw	r30, r28
     532:	e8 0f       	add	r30, r24
     534:	f9 1f       	adc	r31, r25
     536:	10 82       	st	Z, r1
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	f6 cf       	rjmp	.-20     	; 0x528 <_ZN3LCD5clearEv+0x24>
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <_ZN3LCD8setPowerEh>:

void LCD::setPower(uint8_t on) {
	writeCmd(on ? 0x20 : 0x24);
     542:	66 23       	and	r22, r22
     544:	11 f0       	breq	.+4      	; 0x54a <_ZN3LCD8setPowerEh+0x8>
     546:	60 e2       	ldi	r22, 0x20	; 32
     548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN3LCD8setPowerEh+0xa>
     54a:	64 e2       	ldi	r22, 0x24	; 36
     54c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
     550:	08 95       	ret

00000552 <_ZN3LCD9writeDataEh>:

	//Disable controller
	PORTD |= (1<<LCD_SCE);
}
void LCD::writeCmd(uint8_t cmd) {write(cmd,0);}
void LCD::writeData(uint8_t data) {write(data,1);}
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN3LCD5writeEhh>
     558:	08 95       	ret

0000055a <_ZN3LCD5beginEv>:
#include <avr/io.h>
#include <util/delay.h>
#include "charset.cpp"
#include "lcd.h"

void LCD::begin(void) {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	8c 01       	movw	r16, r24
	//Set pins as output
	DDRD |= (1<<LCD_SCE);
     564:	8a b1       	in	r24, 0x0a	; 10
     566:	80 61       	ori	r24, 0x10	; 16
     568:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<LCD_RST);
     56a:	8a b1       	in	r24, 0x0a	; 10
     56c:	88 60       	ori	r24, 0x08	; 8
     56e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<LCD_DC);
     570:	8a b1       	in	r24, 0x0a	; 10
     572:	80 62       	ori	r24, 0x20	; 32
     574:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<LCD_DIN);
     576:	8a b1       	in	r24, 0x0a	; 10
     578:	80 64       	ori	r24, 0x40	; 64
     57a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<LCD_CLK);
     57c:	8a b1       	in	r24, 0x0a	; 10
     57e:	80 68       	ori	r24, 0x80	; 128
     580:	8a b9       	out	0x0a, r24	; 10

	//Reset display
	PORTD |= (1<<LCD_RST);
     582:	8b b1       	in	r24, 0x0b	; 11
     584:	88 60       	ori	r24, 0x08	; 8
     586:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<LCD_SCE);
     588:	8b b1       	in	r24, 0x0b	; 11
     58a:	80 61       	ori	r24, 0x10	; 16
     58c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	83 ec       	ldi	r24, 0xC3	; 195
     590:	99 e0       	ldi	r25, 0x09	; 9
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <_ZN3LCD5beginEv+0x38>
     596:	00 c0       	rjmp	.+0      	; 0x598 <_ZN3LCD5beginEv+0x3e>
     598:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~(1<<LCD_RST);
     59a:	8b b1       	in	r24, 0x0b	; 11
     59c:	87 7f       	andi	r24, 0xF7	; 247
     59e:	8b b9       	out	0x0b, r24	; 11
     5a0:	8b e5       	ldi	r24, 0x5B	; 91
     5a2:	94 e4       	ldi	r25, 0x44	; 68
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <_ZN3LCD5beginEv+0x4a>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <_ZN3LCD5beginEv+0x50>
     5aa:	00 00       	nop
	_delay_ms(70);
	PORTD |= (1<<LCD_RST);
     5ac:	8b b1       	in	r24, 0x0b	; 11
     5ae:	88 60       	ori	r24, 0x08	; 8
     5b0:	8b b9       	out	0x0b, r24	; 11
	
	//Initialize display
	PORTD &= ~(1<<LCD_SCE);   // Enable controller
     5b2:	8b b1       	in	r24, 0x0b	; 11
     5b4:	8f 7e       	andi	r24, 0xEF	; 239
     5b6:	8b b9       	out	0x0b, r24	; 11
	writeCmd(0x21);  // -LCD Extended Commands mode-
     5b8:	61 e2       	ldi	r22, 0x21	; 33
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x13);  // LCD bias mode 1:48
     5c0:	63 e1       	ldi	r22, 0x13	; 19
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x06);  // Set temperature coefficient
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0xC2);  // Default VOP (3.06 + 66 * 0.06 = 7V)
     5d0:	62 ec       	ldi	r22, 0xC2	; 194
     5d2:	c8 01       	movw	r24, r16
     5d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x20);  // Standard Commands mode, powered down
     5d8:	60 e2       	ldi	r22, 0x20	; 32
     5da:	c8 01       	movw	r24, r16
     5dc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x09);  // LCD in normal mode
     5e0:	69 e0       	ldi	r22, 0x09	; 9
     5e2:	c8 01       	movw	r24, r16
     5e4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>

	//Clear LCD RAM
	writeCmd(0x80);
     5e8:	60 e8       	ldi	r22, 0x80	; 128
     5ea:	c8 01       	movw	r24, r16
     5ec:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x40);
     5f0:	60 e4       	ldi	r22, 0x40	; 64
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	for(int i=0;i<504;i++) {writeData(0x00);}
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	c8 3f       	cpi	r28, 0xF8	; 248
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	d9 07       	cpc	r29, r25
     602:	34 f4       	brge	.+12     	; 0x610 <_ZN3LCD5beginEv+0xb6>
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	c8 01       	movw	r24, r16
     608:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN3LCD9writeDataEh>
     60c:	21 96       	adiw	r28, 0x01	; 1
     60e:	f6 cf       	rjmp	.-20     	; 0x5fc <_ZN3LCD5beginEv+0xa2>

	//Activate LCD
	writeCmd(0x08);
     610:	68 e0       	ldi	r22, 0x08	; 8
     612:	c8 01       	movw	r24, r16
     614:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x0C);
     618:	6c e0       	ldi	r22, 0x0C	; 12
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_ZN3LCD6renderEv>:

/*
 * LOW LEVEL FUNCTIONS
 */

void LCD::render(void) {
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	8c 01       	movw	r16, r24
	//Set column and row to 0
	writeCmd(0x80);
     634:	60 e8       	ldi	r22, 0x80	; 128
     636:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>
	writeCmd(0x40);
     63a:	60 e4       	ldi	r22, 0x40	; 64
     63c:	c8 01       	movw	r24, r16
     63e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN3LCD8writeCmdEh>

	//Write screen to display
	for(int i=0;i<504;i++) {writeData(SCREEN[i]);}
     642:	c0 e0       	ldi	r28, 0x00	; 0
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	c8 3f       	cpi	r28, 0xF8	; 248
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	d8 07       	cpc	r29, r24
     64c:	4c f4       	brge	.+18     	; 0x660 <_ZN3LCD6renderEv+0x36>
     64e:	f8 01       	movw	r30, r16
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	60 81       	ld	r22, Z
     656:	c8 01       	movw	r24, r16
     658:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN3LCD9writeDataEh>
     65c:	21 96       	adiw	r28, 0x01	; 1
     65e:	f3 cf       	rjmp	.-26     	; 0x646 <_ZN3LCD6renderEv+0x1c>
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <_Z4waitv>:
#define  dimY 48

uint8_t CURRENT_MIN = 0;
uint8_t CURRENT_SEC = 0;

void wait(){
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	00 d0       	rcall	.+0      	; 0x670 <_Z4waitv+0x6>
     670:	00 d0       	rcall	.+0      	; 0x672 <_Z4waitv+0x8>
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t i,j;
	for (i = 0; i< 1000; i++){
     676:	1a 82       	std	Y+2, r1	; 0x02
     678:	19 82       	std	Y+1, r1	; 0x01
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	88 3e       	cpi	r24, 0xE8	; 232
     680:	93 40       	sbci	r25, 0x03	; 3
     682:	98 f4       	brcc	.+38     	; 0x6aa <_Z4waitv+0x40>
		for (j = 0; j<1000; j++);;
     684:	1c 82       	std	Y+4, r1	; 0x04
     686:	1b 82       	std	Y+3, r1	; 0x03
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	88 3e       	cpi	r24, 0xE8	; 232
     68e:	93 40       	sbci	r25, 0x03	; 3
     690:	30 f4       	brcc	.+12     	; 0x69e <_Z4waitv+0x34>
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	f5 cf       	rjmp	.-22     	; 0x688 <_Z4waitv+0x1e>
uint8_t CURRENT_MIN = 0;
uint8_t CURRENT_SEC = 0;

void wait(){
	volatile uint16_t i,j;
	for (i = 0; i< 1000; i++){
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	e8 cf       	rjmp	.-48     	; 0x67a <_Z4waitv+0x10>
		for (j = 0; j<1000; j++);;
	}
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_Z10toggle_scrv>:

void toggle_scr(){
	lcd.begin();
     6b8:	82 e3       	ldi	r24, 0x32	; 50
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN3LCD5beginEv>
	lcd.setPower(1);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	82 e3       	ldi	r24, 0x32	; 50
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN3LCD8setPowerEh>
	lcd.writeString("STARTING!",1);
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	71 e0       	ldi	r23, 0x01	; 1
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	lcd.render();
     6d8:	82 e3       	ldi	r24, 0x32	; 50
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
     6e0:	08 95       	ret

000006e2 <_Z12toggle_framev>:
}

void toggle_frame(){
     6e2:	cf 93       	push	r28
	uint8_t i;
//	for (i = 0; i<=dimX; i++){
//		lcd.setPixel(i, 0, 1);
//		lcd.setPixel(i, dimY-1, 1);			
//	}
	for (i = 0; i<=dimY; i++){
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	c1 33       	cpi	r28, 0x31	; 49
     6e8:	f0 f4       	brcc	.+60     	; 0x726 <_Z12toggle_framev+0x44>
		lcd.setPixel(0, i, 1);
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	4c 2f       	mov	r20, r28
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	82 e3       	ldi	r24, 0x32	; 50
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
		lcd.setPixel(dimY, i, 1);			
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	4c 2f       	mov	r20, r28
     6fc:	60 e3       	ldi	r22, 0x30	; 48
     6fe:	82 e3       	ldi	r24, 0x32	; 50
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
		lcd.setPixel(i, 0, 1);
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	6c 2f       	mov	r22, r28
     70c:	82 e3       	ldi	r24, 0x32	; 50
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
		lcd.setPixel(i, dimY-1, 1);			
     714:	21 e0       	ldi	r18, 0x01	; 1
     716:	4f e2       	ldi	r20, 0x2F	; 47
     718:	6c 2f       	mov	r22, r28
     71a:	82 e3       	ldi	r24, 0x32	; 50
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
	uint8_t i;
//	for (i = 0; i<=dimX; i++){
//		lcd.setPixel(i, 0, 1);
//		lcd.setPixel(i, dimY-1, 1);			
//	}
	for (i = 0; i<=dimY; i++){
     722:	cf 5f       	subi	r28, 0xFF	; 255
     724:	e0 cf       	rjmp	.-64     	; 0x6e6 <_Z12toggle_framev+0x4>
		lcd.setPixel(0, i, 1);
		lcd.setPixel(dimY, i, 1);			
		lcd.setPixel(i, 0, 1);
		lcd.setPixel(i, dimY-1, 1);			
	}
	lcd.render();
     726:	82 e3       	ldi	r24, 0x32	; 50
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
}
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <_Z17toggle_scoreboardv>:
void toggle_scoreboard(){
	// game screen - dimY x dimY
	// score screen - dimY + 1
	
		// set time
	lcd.setCursor(dimY+2, 0);
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	62 e3       	ldi	r22, 0x32	; 50
     736:	82 e3       	ldi	r24, 0x32	; 50
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	lcd.writeString("TIME", 1);
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	6a e0       	ldi	r22, 0x0A	; 10
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	82 e3       	ldi	r24, 0x32	; 50
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	lcd.setCursor(dimY+5, 10);
     74c:	4a e0       	ldi	r20, 0x0A	; 10
     74e:	65 e3       	ldi	r22, 0x35	; 53
     750:	82 e3       	ldi	r24, 0x32	; 50
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	lcd.writeString("XX:XX", 1);
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	6f e0       	ldi	r22, 0x0F	; 15
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	82 e3       	ldi	r24, 0x32	; 50
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	
		// set score
	lcd.setCursor(dimY+2, dimY/2 + 5);
     766:	4d e1       	ldi	r20, 0x1D	; 29
     768:	62 e3       	ldi	r22, 0x32	; 50
     76a:	82 e3       	ldi	r24, 0x32	; 50
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	lcd.writeString("SCORE", 1);
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	65 e1       	ldi	r22, 0x15	; 21
     776:	71 e0       	ldi	r23, 0x01	; 1
     778:	82 e3       	ldi	r24, 0x32	; 50
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	lcd.setCursor(dimY+5, dimY/2 + 15);
     780:	47 e2       	ldi	r20, 0x27	; 39
     782:	65 e3       	ldi	r22, 0x35	; 53
     784:	82 e3       	ldi	r24, 0x32	; 50
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	lcd.writeString("XXXX", 1);
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	6b e1       	ldi	r22, 0x1B	; 27
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	82 e3       	ldi	r24, 0x32	; 50
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	
	lcd.render();
     79a:	82 e3       	ldi	r24, 0x32	; 50
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
     7a2:	08 95       	ret

000007a4 <_Z17clear_scoreborardv>:
}

void clear_scoreborard(){
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
	//lcd.setCursor(dimY+3, dimY/2 + 15);
	unsigned int i,j;
	for (i = dimY+5; i< dimX; i++){
     7ac:	05 e3       	ldi	r16, 0x35	; 53
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	04 35       	cpi	r16, 0x54	; 84
     7b2:	11 05       	cpc	r17, r1
     7b4:	88 f4       	brcc	.+34     	; 0x7d8 <_Z17clear_scoreborardv+0x34>
     7b6:	c7 e2       	ldi	r28, 0x27	; 39
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
		for (j = dimY/2 + 15; j<dimY;j++){
     7ba:	c0 33       	cpi	r28, 0x30	; 48
     7bc:	d1 05       	cpc	r29, r1
     7be:	48 f4       	brcc	.+18     	; 0x7d2 <_Z17clear_scoreborardv+0x2e>
			lcd.setPixel(i,j,0);
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	4c 2f       	mov	r20, r28
     7c4:	60 2f       	mov	r22, r16
     7c6:	82 e3       	ldi	r24, 0x32	; 50
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>

void clear_scoreborard(){
	//lcd.setCursor(dimY+3, dimY/2 + 15);
	unsigned int i,j;
	for (i = dimY+5; i< dimX; i++){
		for (j = dimY/2 + 15; j<dimY;j++){
     7ce:	21 96       	adiw	r28, 0x01	; 1
     7d0:	f4 cf       	rjmp	.-24     	; 0x7ba <_Z17clear_scoreborardv+0x16>
}

void clear_scoreborard(){
	//lcd.setCursor(dimY+3, dimY/2 + 15);
	unsigned int i,j;
	for (i = dimY+5; i< dimX; i++){
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	ec cf       	rjmp	.-40     	; 0x7b0 <_Z17clear_scoreborardv+0xc>
		for (j = dimY/2 + 15; j<dimY;j++){
			lcd.setPixel(i,j,0);
		}
	}
	//lcd.setCursor(dimY+3, dimY/2 + 15);
	lcd.render();
     7d8:	82 e3       	ldi	r24, 0x32	; 50
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <_Z17change_scoreboardj>:

void change_scoreboard(uint16_t score){
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <_Z17change_scoreboardj+0xa>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <_Z17change_scoreboardj+0xc>
     7f6:	1f 92       	push	r1
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	8c 01       	movw	r16, r24
	char str[5];
	 snprintf(str, sizeof(str), "%u", score);
     7fe:	1f 93       	push	r17
     800:	8f 93       	push	r24
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	9f 93       	push	r25
     808:	8f 93       	push	r24
     80a:	1f 92       	push	r1
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	8f 93       	push	r24
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	0e 94 75 05 	call	0xaea	; 0xaea <snprintf>
	
	clear_scoreborard();		
     81c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_Z17clear_scoreborardv>
	
	lcd.setCursor(dimY+5, dimY/2 + 15);
     820:	47 e2       	ldi	r20, 0x27	; 39
     822:	65 e3       	ldi	r22, 0x35	; 53
     824:	82 e3       	ldi	r24, 0x32	; 50
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	
	 if(score <=9 ){
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	0a 30       	cpi	r16, 0x0A	; 10
     838:	11 05       	cpc	r17, r1
     83a:	78 f4       	brcc	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			lcd.writeString( "000", 1);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	63 e2       	ldi	r22, 0x23	; 35
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	82 e3       	ldi	r24, 0x32	; 50
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
			lcd.writeString( str, 1);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	82 e3       	ldi	r24, 0x32	; 50
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}if(score <=99 && score > 9){
     85a:	c8 01       	movw	r24, r16
     85c:	0a 97       	sbiw	r24, 0x0a	; 10
     85e:	8a 35       	cpi	r24, 0x5A	; 90
     860:	91 05       	cpc	r25, r1
     862:	78 f4       	brcc	.+30     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
			lcd.writeString( "00", 1);
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	64 e2       	ldi	r22, 0x24	; 36
     868:	71 e0       	ldi	r23, 0x01	; 1
     86a:	82 e3       	ldi	r24, 0x32	; 50
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
			lcd.writeString( str, 1);
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	be 01       	movw	r22, r28
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	82 e3       	ldi	r24, 0x32	; 50
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}if(score <=999 && score > 99){
     882:	c8 01       	movw	r24, r16
     884:	84 56       	subi	r24, 0x64	; 100
     886:	91 09       	sbc	r25, r1
     888:	84 38       	cpi	r24, 0x84	; 132
     88a:	93 40       	sbci	r25, 0x03	; 3
     88c:	78 f4       	brcc	.+30     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
			lcd.writeString( "0", 1);
     88e:	41 e0       	ldi	r20, 0x01	; 1
     890:	65 e2       	ldi	r22, 0x25	; 37
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	82 e3       	ldi	r24, 0x32	; 50
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
			lcd.writeString( str, 1);
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	be 01       	movw	r22, r28
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	82 e3       	ldi	r24, 0x32	; 50
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}if(score > 999){
     8ac:	08 3e       	cpi	r16, 0xE8	; 232
     8ae:	13 40       	sbci	r17, 0x03	; 3
     8b0:	78 f0       	brcs	.+30     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
			lcd.writeString( "", 1);
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	69 e0       	ldi	r22, 0x09	; 9
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	82 e3       	ldi	r24, 0x32	; 50
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
			lcd.writeString( str, 1);
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	82 e3       	ldi	r24, 0x32	; 50
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}
	

	lcd.render();
     8d0:	82 e3       	ldi	r24, 0x32	; 50
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
	
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <_Z10clear_timev>:

void clear_time(){
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	unsigned int i,j;
	//	lcd.setCursor(dimY+5, 10);

	for (i = dimY+5; i< dimX; i++){
     8f4:	05 e3       	ldi	r16, 0x35	; 53
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	04 35       	cpi	r16, 0x54	; 84
     8fa:	11 05       	cpc	r17, r1
     8fc:	88 f4       	brcc	.+34     	; 0x920 <__stack+0x21>
     8fe:	ca e0       	ldi	r28, 0x0A	; 10
     900:	d0 e0       	ldi	r29, 0x00	; 0
		for (j = 10 ; j<dimY/2 ;j++){
     902:	c8 31       	cpi	r28, 0x18	; 24
     904:	d1 05       	cpc	r29, r1
     906:	48 f4       	brcc	.+18     	; 0x91a <__stack+0x1b>
			lcd.setPixel(i,j,0);
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	4c 2f       	mov	r20, r28
     90c:	60 2f       	mov	r22, r16
     90e:	82 e3       	ldi	r24, 0x32	; 50
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN3LCD8setPixelEhhh>
void clear_time(){
	unsigned int i,j;
	//	lcd.setCursor(dimY+5, 10);

	for (i = dimY+5; i< dimX; i++){
		for (j = 10 ; j<dimY/2 ;j++){
     916:	21 96       	adiw	r28, 0x01	; 1
     918:	f4 cf       	rjmp	.-24     	; 0x902 <__stack+0x3>

void clear_time(){
	unsigned int i,j;
	//	lcd.setCursor(dimY+5, 10);

	for (i = dimY+5; i< dimX; i++){
     91a:	0f 5f       	subi	r16, 0xFF	; 255
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ec cf       	rjmp	.-40     	; 0x8f8 <_Z10clear_timev+0xc>
		for (j = 10 ; j<dimY/2 ;j++){
			lcd.setPixel(i,j,0);
		}
	}
	
	lcd.render();
     920:	82 e3       	ldi	r24, 0x32	; 50
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <_Z8set_timev>:

void set_time(){
	
	lcd.setCursor(dimY+5, 10);
     932:	4a e0       	ldi	r20, 0x0A	; 10
     934:	65 e3       	ldi	r22, 0x35	; 53
     936:	82 e3       	ldi	r24, 0x32	; 50
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	lcd.writeString("00:00", 1);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	67 e2       	ldi	r22, 0x27	; 39
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	82 e3       	ldi	r24, 0x32	; 50
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	lcd.render();
     94c:	82 e3       	ldi	r24, 0x32	; 50
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
	CURRENT_SEC = 0;
     954:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
	CURRENT_MIN = 0;
     958:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <CURRENT_MIN>
     95c:	08 95       	ret

0000095e <_Z14increment_timev>:
}

void increment_time(){
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <_Z14increment_timev+0xc>
     96a:	00 d0       	rcall	.+0      	; 0x96c <_Z14increment_timev+0xe>
     96c:	00 d0       	rcall	.+0      	; 0x96e <_Z14increment_timev+0x10>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	
	CURRENT_SEC ++;
     972:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	if ( CURRENT_SEC == 60 ) {CURRENT_MIN++; CURRENT_SEC= 0;}
     97c:	8c 33       	cpi	r24, 0x3C	; 60
     97e:	39 f4       	brne	.+14     	; 0x98e <_Z14increment_timev+0x30>
     980:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <CURRENT_MIN>
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <CURRENT_MIN>
     98a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
	
	char str_min[3];
	snprintf(str_min, sizeof(str_min), "%u",CURRENT_MIN); // changes uint8_t to char array
     98e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <CURRENT_MIN>
     992:	1f 92       	push	r1
     994:	8f 93       	push	r24
     996:	00 e2       	ldi	r16, 0x20	; 32
     998:	11 e0       	ldi	r17, 0x01	; 1
     99a:	1f 93       	push	r17
     99c:	0f 93       	push	r16
     99e:	1f 92       	push	r1
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	ff 2e       	mov	r15, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	ff 92       	push	r15
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	0e 94 75 05 	call	0xaea	; 0xaea <snprintf>
	
	
	
	char str_sec[3];
	snprintf(str_sec, sizeof(str_sec), "%u",CURRENT_SEC); // changes uint8_t to char array
     9b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     9ba:	1f 92       	push	r1
     9bc:	8f 93       	push	r24
     9be:	1f 93       	push	r17
     9c0:	0f 93       	push	r16
     9c2:	1f 92       	push	r1
     9c4:	ff 92       	push	r15
     9c6:	ce 01       	movw	r24, r28
     9c8:	04 96       	adiw	r24, 0x04	; 4
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	0e 94 75 05 	call	0xaea	; 0xaea <snprintf>
	
	clear_time();
     9d2:	0e 94 76 04 	call	0x8ec	; 0x8ec <_Z10clear_timev>
	lcd.setCursor(dimY+5, 10);
     9d6:	4a e0       	ldi	r20, 0x0A	; 10
     9d8:	65 e3       	ldi	r22, 0x35	; 53
     9da:	82 e3       	ldi	r24, 0x32	; 50
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN3LCD9setCursorEhh>
	
	if (CURRENT_MIN <= 9) {
     9e2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <CURRENT_MIN>
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	8a 30       	cpi	r24, 0x0A	; 10
     9f2:	80 f4       	brcc	.+32     	; 0xa14 <_Z14increment_timev+0xb6>
		lcd.writeString("0",1);
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	65 e2       	ldi	r22, 0x25	; 37
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	82 e3       	ldi	r24, 0x32	; 50
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
		lcd.writeString(str_min, 1);
     a02:	41 e0       	ldi	r20, 0x01	; 1
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	82 e3       	ldi	r24, 0x32	; 50
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <_Z14increment_timev+0xc6>
	}else{
		lcd.writeString(str_min, 1);
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	82 e3       	ldi	r24, 0x32	; 50
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}
	lcd.writeString(":", 1);
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	6d e2       	ldi	r22, 0x2D	; 45
     a28:	71 e0       	ldi	r23, 0x01	; 1
     a2a:	82 e3       	ldi	r24, 0x32	; 50
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	
	if (CURRENT_SEC <= 9) {
     a32:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     a36:	8a 30       	cpi	r24, 0x0A	; 10
     a38:	80 f4       	brcc	.+32     	; 0xa5a <_Z14increment_timev+0xfc>
		lcd.writeString("0",1);
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	65 e2       	ldi	r22, 0x25	; 37
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	82 e3       	ldi	r24, 0x32	; 50
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
		lcd.writeString(str_sec, 1);
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	be 01       	movw	r22, r28
     a4c:	6c 5f       	subi	r22, 0xFC	; 252
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	82 e3       	ldi	r24, 0x32	; 50
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <_Z14increment_timev+0x10c>
	}else{
		lcd.writeString(str_sec, 1);
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	be 01       	movw	r22, r28
     a5e:	6c 5f       	subi	r22, 0xFC	; 252
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	82 e3       	ldi	r24, 0x32	; 50
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN3LCD11writeStringEPch>
	}

	lcd.render();
     a6a:	82 e3       	ldi	r24, 0x32	; 50
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>
	
}
     a72:	26 96       	adiw	r28, 0x06	; 6
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	08 95       	ret

00000a8a <_Z10enable_lcdv>:

void enable_lcd(){
	
 	toggle_scr();
     a8a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z10toggle_scrv>
	lcd.clear();
     a8e:	82 e3       	ldi	r24, 0x32	; 50
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 82 02 	call	0x504	; 0x504 <_ZN3LCD5clearEv>
	toggle_frame();
     a96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z12toggle_framev>
	toggle_scoreboard();
     a9a:	0e 94 99 03 	call	0x732	; 0x732 <_Z17toggle_scoreboardv>
	clear_time();
     a9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <_Z10clear_timev>
	set_time();
     aa2:	0e 94 99 04 	call	0x932	; 0x932 <_Z8set_timev>
     aa6:	08 95       	ret

00000aa8 <main>:
}

int main(void)
{
	 uint16_t score = 1519;
	enable_lcd();
     aa8:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z10enable_lcdv>

	change_scoreboard(score	);
     aac:	8f ee       	ldi	r24, 0xEF	; 239
     aae:	95 e0       	ldi	r25, 0x05	; 5
     ab0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_Z17change_scoreboardj>




	lcd.render();
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN3LCD6renderEv>


	while(1) {

		for (int i = 0; i<120; i++){
     abc:	c0 e0       	ldi	r28, 0x00	; 0
     abe:	d0 e0       	ldi	r29, 0x00	; 0
     ac0:	c8 37       	cpi	r28, 0x78	; 120
     ac2:	d1 05       	cpc	r29, r1
     ac4:	dc f7       	brge	.-10     	; 0xabc <main+0x14>
			increment_time();
     ac6:	0e 94 af 04 	call	0x95e	; 0x95e <_Z14increment_timev>
			wait();
     aca:	0e 94 35 03 	call	0x66a	; 0x66a <_Z4waitv>
	lcd.render();


	while(1) {

		for (int i = 0; i<120; i++){
     ace:	21 96       	adiw	r28, 0x01	; 1
     ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <main+0x18>

00000ad2 <__udivmodqi4>:
     ad2:	99 1b       	sub	r25, r25
     ad4:	79 e0       	ldi	r23, 0x09	; 9
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__udivmodqi4_ep>

00000ad8 <__udivmodqi4_loop>:
     ad8:	99 1f       	adc	r25, r25
     ada:	96 17       	cp	r25, r22
     adc:	08 f0       	brcs	.+2      	; 0xae0 <__udivmodqi4_ep>
     ade:	96 1b       	sub	r25, r22

00000ae0 <__udivmodqi4_ep>:
     ae0:	88 1f       	adc	r24, r24
     ae2:	7a 95       	dec	r23
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <__udivmodqi4_loop>
     ae6:	80 95       	com	r24
     ae8:	08 95       	ret

00000aea <snprintf>:
     aea:	ae e0       	ldi	r26, 0x0E	; 14
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	eb e7       	ldi	r30, 0x7B	; 123
     af0:	f5 e0       	ldi	r31, 0x05	; 5
     af2:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__prologue_saves__+0x1c>
     af6:	0d 89       	ldd	r16, Y+21	; 0x15
     af8:	1e 89       	ldd	r17, Y+22	; 0x16
     afa:	8f 89       	ldd	r24, Y+23	; 0x17
     afc:	98 8d       	ldd	r25, Y+24	; 0x18
     afe:	26 e0       	ldi	r18, 0x06	; 6
     b00:	2c 83       	std	Y+4, r18	; 0x04
     b02:	1a 83       	std	Y+2, r17	; 0x02
     b04:	09 83       	std	Y+1, r16	; 0x01
     b06:	97 ff       	sbrs	r25, 7
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <snprintf+0x24>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e8       	ldi	r25, 0x80	; 128
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9e 83       	std	Y+6, r25	; 0x06
     b12:	8d 83       	std	Y+5, r24	; 0x05
     b14:	ae 01       	movw	r20, r28
     b16:	45 5e       	subi	r20, 0xE5	; 229
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	69 8d       	ldd	r22, Y+25	; 0x19
     b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 a5 05 	call	0xb4a	; 0xb4a <vfprintf>
     b26:	4d 81       	ldd	r20, Y+5	; 0x05
     b28:	5e 81       	ldd	r21, Y+6	; 0x06
     b2a:	57 fd       	sbrc	r21, 7
     b2c:	0a c0       	rjmp	.+20     	; 0xb42 <snprintf+0x58>
     b2e:	2f 81       	ldd	r18, Y+7	; 0x07
     b30:	38 85       	ldd	r19, Y+8	; 0x08
     b32:	42 17       	cp	r20, r18
     b34:	53 07       	cpc	r21, r19
     b36:	0c f4       	brge	.+2      	; 0xb3a <snprintf+0x50>
     b38:	9a 01       	movw	r18, r20
     b3a:	f8 01       	movw	r30, r16
     b3c:	e2 0f       	add	r30, r18
     b3e:	f3 1f       	adc	r31, r19
     b40:	10 82       	st	Z, r1
     b42:	2e 96       	adiw	r28, 0x0e	; 14
     b44:	e4 e0       	ldi	r30, 0x04	; 4
     b46:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__epilogue_restores__+0x1c>

00000b4a <vfprintf>:
     b4a:	ab e0       	ldi	r26, 0x0B	; 11
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	eb ea       	ldi	r30, 0xAB	; 171
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__>
     b56:	6c 01       	movw	r12, r24
     b58:	7b 01       	movw	r14, r22
     b5a:	8a 01       	movw	r16, r20
     b5c:	fc 01       	movw	r30, r24
     b5e:	17 82       	std	Z+7, r1	; 0x07
     b60:	16 82       	std	Z+6, r1	; 0x06
     b62:	83 81       	ldd	r24, Z+3	; 0x03
     b64:	81 ff       	sbrs	r24, 1
     b66:	cc c1       	rjmp	.+920    	; 0xf00 <vfprintf+0x3b6>
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	3c 01       	movw	r6, r24
     b6e:	f6 01       	movw	r30, r12
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	f7 01       	movw	r30, r14
     b74:	93 fd       	sbrc	r25, 3
     b76:	85 91       	lpm	r24, Z+
     b78:	93 ff       	sbrs	r25, 3
     b7a:	81 91       	ld	r24, Z+
     b7c:	7f 01       	movw	r14, r30
     b7e:	88 23       	and	r24, r24
     b80:	09 f4       	brne	.+2      	; 0xb84 <vfprintf+0x3a>
     b82:	ba c1       	rjmp	.+884    	; 0xef8 <vfprintf+0x3ae>
     b84:	85 32       	cpi	r24, 0x25	; 37
     b86:	39 f4       	brne	.+14     	; 0xb96 <vfprintf+0x4c>
     b88:	93 fd       	sbrc	r25, 3
     b8a:	85 91       	lpm	r24, Z+
     b8c:	93 ff       	sbrs	r25, 3
     b8e:	81 91       	ld	r24, Z+
     b90:	7f 01       	movw	r14, r30
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	29 f4       	brne	.+10     	; 0xba0 <vfprintf+0x56>
     b96:	b6 01       	movw	r22, r12
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     b9e:	e7 cf       	rjmp	.-50     	; 0xb6e <vfprintf+0x24>
     ba0:	91 2c       	mov	r9, r1
     ba2:	21 2c       	mov	r2, r1
     ba4:	31 2c       	mov	r3, r1
     ba6:	ff e1       	ldi	r31, 0x1F	; 31
     ba8:	f3 15       	cp	r31, r3
     baa:	d8 f0       	brcs	.+54     	; 0xbe2 <vfprintf+0x98>
     bac:	8b 32       	cpi	r24, 0x2B	; 43
     bae:	79 f0       	breq	.+30     	; 0xbce <vfprintf+0x84>
     bb0:	38 f4       	brcc	.+14     	; 0xbc0 <vfprintf+0x76>
     bb2:	80 32       	cpi	r24, 0x20	; 32
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <vfprintf+0x8a>
     bb6:	83 32       	cpi	r24, 0x23	; 35
     bb8:	a1 f4       	brne	.+40     	; 0xbe2 <vfprintf+0x98>
     bba:	23 2d       	mov	r18, r3
     bbc:	20 61       	ori	r18, 0x10	; 16
     bbe:	1d c0       	rjmp	.+58     	; 0xbfa <vfprintf+0xb0>
     bc0:	8d 32       	cpi	r24, 0x2D	; 45
     bc2:	61 f0       	breq	.+24     	; 0xbdc <vfprintf+0x92>
     bc4:	80 33       	cpi	r24, 0x30	; 48
     bc6:	69 f4       	brne	.+26     	; 0xbe2 <vfprintf+0x98>
     bc8:	23 2d       	mov	r18, r3
     bca:	21 60       	ori	r18, 0x01	; 1
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <vfprintf+0xb0>
     bce:	83 2d       	mov	r24, r3
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	38 2e       	mov	r3, r24
     bd4:	e3 2d       	mov	r30, r3
     bd6:	e4 60       	ori	r30, 0x04	; 4
     bd8:	3e 2e       	mov	r3, r30
     bda:	2a c0       	rjmp	.+84     	; 0xc30 <vfprintf+0xe6>
     bdc:	f3 2d       	mov	r31, r3
     bde:	f8 60       	ori	r31, 0x08	; 8
     be0:	1d c0       	rjmp	.+58     	; 0xc1c <vfprintf+0xd2>
     be2:	37 fc       	sbrc	r3, 7
     be4:	2d c0       	rjmp	.+90     	; 0xc40 <vfprintf+0xf6>
     be6:	20 ed       	ldi	r18, 0xD0	; 208
     be8:	28 0f       	add	r18, r24
     bea:	2a 30       	cpi	r18, 0x0A	; 10
     bec:	40 f0       	brcs	.+16     	; 0xbfe <vfprintf+0xb4>
     bee:	8e 32       	cpi	r24, 0x2E	; 46
     bf0:	b9 f4       	brne	.+46     	; 0xc20 <vfprintf+0xd6>
     bf2:	36 fc       	sbrc	r3, 6
     bf4:	81 c1       	rjmp	.+770    	; 0xef8 <vfprintf+0x3ae>
     bf6:	23 2d       	mov	r18, r3
     bf8:	20 64       	ori	r18, 0x40	; 64
     bfa:	32 2e       	mov	r3, r18
     bfc:	19 c0       	rjmp	.+50     	; 0xc30 <vfprintf+0xe6>
     bfe:	36 fe       	sbrs	r3, 6
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <vfprintf+0xc4>
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	98 9e       	mul	r9, r24
     c06:	20 0d       	add	r18, r0
     c08:	11 24       	eor	r1, r1
     c0a:	92 2e       	mov	r9, r18
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <vfprintf+0xe6>
     c0e:	ea e0       	ldi	r30, 0x0A	; 10
     c10:	2e 9e       	mul	r2, r30
     c12:	20 0d       	add	r18, r0
     c14:	11 24       	eor	r1, r1
     c16:	22 2e       	mov	r2, r18
     c18:	f3 2d       	mov	r31, r3
     c1a:	f0 62       	ori	r31, 0x20	; 32
     c1c:	3f 2e       	mov	r3, r31
     c1e:	08 c0       	rjmp	.+16     	; 0xc30 <vfprintf+0xe6>
     c20:	8c 36       	cpi	r24, 0x6C	; 108
     c22:	21 f4       	brne	.+8      	; 0xc2c <vfprintf+0xe2>
     c24:	83 2d       	mov	r24, r3
     c26:	80 68       	ori	r24, 0x80	; 128
     c28:	38 2e       	mov	r3, r24
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0xe6>
     c2c:	88 36       	cpi	r24, 0x68	; 104
     c2e:	41 f4       	brne	.+16     	; 0xc40 <vfprintf+0xf6>
     c30:	f7 01       	movw	r30, r14
     c32:	93 fd       	sbrc	r25, 3
     c34:	85 91       	lpm	r24, Z+
     c36:	93 ff       	sbrs	r25, 3
     c38:	81 91       	ld	r24, Z+
     c3a:	7f 01       	movw	r14, r30
     c3c:	81 11       	cpse	r24, r1
     c3e:	b3 cf       	rjmp	.-154    	; 0xba6 <vfprintf+0x5c>
     c40:	98 2f       	mov	r25, r24
     c42:	9f 7d       	andi	r25, 0xDF	; 223
     c44:	95 54       	subi	r25, 0x45	; 69
     c46:	93 30       	cpi	r25, 0x03	; 3
     c48:	28 f4       	brcc	.+10     	; 0xc54 <vfprintf+0x10a>
     c4a:	0c 5f       	subi	r16, 0xFC	; 252
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	99 83       	std	Y+1, r25	; 0x01
     c52:	0d c0       	rjmp	.+26     	; 0xc6e <vfprintf+0x124>
     c54:	83 36       	cpi	r24, 0x63	; 99
     c56:	31 f0       	breq	.+12     	; 0xc64 <vfprintf+0x11a>
     c58:	83 37       	cpi	r24, 0x73	; 115
     c5a:	71 f0       	breq	.+28     	; 0xc78 <vfprintf+0x12e>
     c5c:	83 35       	cpi	r24, 0x53	; 83
     c5e:	09 f0       	breq	.+2      	; 0xc62 <vfprintf+0x118>
     c60:	59 c0       	rjmp	.+178    	; 0xd14 <vfprintf+0x1ca>
     c62:	21 c0       	rjmp	.+66     	; 0xca6 <vfprintf+0x15c>
     c64:	f8 01       	movw	r30, r16
     c66:	80 81       	ld	r24, Z
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	0e 5f       	subi	r16, 0xFE	; 254
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	88 24       	eor	r8, r8
     c70:	83 94       	inc	r8
     c72:	91 2c       	mov	r9, r1
     c74:	53 01       	movw	r10, r6
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <vfprintf+0x154>
     c78:	28 01       	movw	r4, r16
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	4f 0e       	add	r4, r31
     c7e:	51 1c       	adc	r5, r1
     c80:	f8 01       	movw	r30, r16
     c82:	a0 80       	ld	r10, Z
     c84:	b1 80       	ldd	r11, Z+1	; 0x01
     c86:	36 fe       	sbrs	r3, 6
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <vfprintf+0x146>
     c8a:	69 2d       	mov	r22, r9
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x14a>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	c5 01       	movw	r24, r10
     c96:	0e 94 91 07 	call	0xf22	; 0xf22 <strnlen>
     c9a:	4c 01       	movw	r8, r24
     c9c:	82 01       	movw	r16, r4
     c9e:	f3 2d       	mov	r31, r3
     ca0:	ff 77       	andi	r31, 0x7F	; 127
     ca2:	3f 2e       	mov	r3, r31
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <vfprintf+0x188>
     ca6:	28 01       	movw	r4, r16
     ca8:	22 e0       	ldi	r18, 0x02	; 2
     caa:	42 0e       	add	r4, r18
     cac:	51 1c       	adc	r5, r1
     cae:	f8 01       	movw	r30, r16
     cb0:	a0 80       	ld	r10, Z
     cb2:	b1 80       	ldd	r11, Z+1	; 0x01
     cb4:	36 fe       	sbrs	r3, 6
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <vfprintf+0x174>
     cb8:	69 2d       	mov	r22, r9
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x178>
     cbe:	6f ef       	ldi	r22, 0xFF	; 255
     cc0:	7f ef       	ldi	r23, 0xFF	; 255
     cc2:	c5 01       	movw	r24, r10
     cc4:	0e 94 86 07 	call	0xf0c	; 0xf0c <strnlen_P>
     cc8:	4c 01       	movw	r8, r24
     cca:	f3 2d       	mov	r31, r3
     ccc:	f0 68       	ori	r31, 0x80	; 128
     cce:	3f 2e       	mov	r3, r31
     cd0:	82 01       	movw	r16, r4
     cd2:	33 fc       	sbrc	r3, 3
     cd4:	1b c0       	rjmp	.+54     	; 0xd0c <vfprintf+0x1c2>
     cd6:	82 2d       	mov	r24, r2
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	88 16       	cp	r8, r24
     cdc:	99 06       	cpc	r9, r25
     cde:	b0 f4       	brcc	.+44     	; 0xd0c <vfprintf+0x1c2>
     ce0:	b6 01       	movw	r22, r12
     ce2:	80 e2       	ldi	r24, 0x20	; 32
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     cea:	2a 94       	dec	r2
     cec:	f4 cf       	rjmp	.-24     	; 0xcd6 <vfprintf+0x18c>
     cee:	f5 01       	movw	r30, r10
     cf0:	37 fc       	sbrc	r3, 7
     cf2:	85 91       	lpm	r24, Z+
     cf4:	37 fe       	sbrs	r3, 7
     cf6:	81 91       	ld	r24, Z+
     cf8:	5f 01       	movw	r10, r30
     cfa:	b6 01       	movw	r22, r12
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     d02:	21 10       	cpse	r2, r1
     d04:	2a 94       	dec	r2
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	82 1a       	sub	r8, r18
     d0a:	91 08       	sbc	r9, r1
     d0c:	81 14       	cp	r8, r1
     d0e:	91 04       	cpc	r9, r1
     d10:	71 f7       	brne	.-36     	; 0xcee <vfprintf+0x1a4>
     d12:	e8 c0       	rjmp	.+464    	; 0xee4 <vfprintf+0x39a>
     d14:	84 36       	cpi	r24, 0x64	; 100
     d16:	11 f0       	breq	.+4      	; 0xd1c <vfprintf+0x1d2>
     d18:	89 36       	cpi	r24, 0x69	; 105
     d1a:	41 f5       	brne	.+80     	; 0xd6c <vfprintf+0x222>
     d1c:	f8 01       	movw	r30, r16
     d1e:	37 fe       	sbrs	r3, 7
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <vfprintf+0x1e6>
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	0c 5f       	subi	r16, 0xFC	; 252
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <vfprintf+0x1f6>
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	07 2e       	mov	r0, r23
     d36:	00 0c       	add	r0, r0
     d38:	88 0b       	sbc	r24, r24
     d3a:	99 0b       	sbc	r25, r25
     d3c:	0e 5f       	subi	r16, 0xFE	; 254
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	f3 2d       	mov	r31, r3
     d42:	ff 76       	andi	r31, 0x6F	; 111
     d44:	3f 2e       	mov	r3, r31
     d46:	97 ff       	sbrs	r25, 7
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <vfprintf+0x212>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	f0 68       	ori	r31, 0x80	; 128
     d5a:	3f 2e       	mov	r3, r31
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	a3 01       	movw	r20, r6
     d62:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__ultoa_invert>
     d66:	88 2e       	mov	r8, r24
     d68:	86 18       	sub	r8, r6
     d6a:	45 c0       	rjmp	.+138    	; 0xdf6 <vfprintf+0x2ac>
     d6c:	85 37       	cpi	r24, 0x75	; 117
     d6e:	31 f4       	brne	.+12     	; 0xd7c <vfprintf+0x232>
     d70:	23 2d       	mov	r18, r3
     d72:	2f 7e       	andi	r18, 0xEF	; 239
     d74:	b2 2e       	mov	r11, r18
     d76:	2a e0       	ldi	r18, 0x0A	; 10
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	25 c0       	rjmp	.+74     	; 0xdc6 <vfprintf+0x27c>
     d7c:	93 2d       	mov	r25, r3
     d7e:	99 7f       	andi	r25, 0xF9	; 249
     d80:	b9 2e       	mov	r11, r25
     d82:	8f 36       	cpi	r24, 0x6F	; 111
     d84:	c1 f0       	breq	.+48     	; 0xdb6 <vfprintf+0x26c>
     d86:	18 f4       	brcc	.+6      	; 0xd8e <vfprintf+0x244>
     d88:	88 35       	cpi	r24, 0x58	; 88
     d8a:	79 f0       	breq	.+30     	; 0xdaa <vfprintf+0x260>
     d8c:	b5 c0       	rjmp	.+362    	; 0xef8 <vfprintf+0x3ae>
     d8e:	80 37       	cpi	r24, 0x70	; 112
     d90:	19 f0       	breq	.+6      	; 0xd98 <vfprintf+0x24e>
     d92:	88 37       	cpi	r24, 0x78	; 120
     d94:	21 f0       	breq	.+8      	; 0xd9e <vfprintf+0x254>
     d96:	b0 c0       	rjmp	.+352    	; 0xef8 <vfprintf+0x3ae>
     d98:	e9 2f       	mov	r30, r25
     d9a:	e0 61       	ori	r30, 0x10	; 16
     d9c:	be 2e       	mov	r11, r30
     d9e:	b4 fe       	sbrs	r11, 4
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <vfprintf+0x272>
     da2:	fb 2d       	mov	r31, r11
     da4:	f4 60       	ori	r31, 0x04	; 4
     da6:	bf 2e       	mov	r11, r31
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <vfprintf+0x272>
     daa:	34 fe       	sbrs	r3, 4
     dac:	0a c0       	rjmp	.+20     	; 0xdc2 <vfprintf+0x278>
     dae:	29 2f       	mov	r18, r25
     db0:	26 60       	ori	r18, 0x06	; 6
     db2:	b2 2e       	mov	r11, r18
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <vfprintf+0x278>
     db6:	28 e0       	ldi	r18, 0x08	; 8
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <vfprintf+0x27c>
     dbc:	20 e1       	ldi	r18, 0x10	; 16
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x27c>
     dc2:	20 e1       	ldi	r18, 0x10	; 16
     dc4:	32 e0       	ldi	r19, 0x02	; 2
     dc6:	f8 01       	movw	r30, r16
     dc8:	b7 fe       	sbrs	r11, 7
     dca:	07 c0       	rjmp	.+14     	; 0xdda <vfprintf+0x290>
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	0c 5f       	subi	r16, 0xFC	; 252
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <vfprintf+0x29c>
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 5f       	subi	r16, 0xFE	; 254
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	a3 01       	movw	r20, r6
     de8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__ultoa_invert>
     dec:	88 2e       	mov	r8, r24
     dee:	86 18       	sub	r8, r6
     df0:	fb 2d       	mov	r31, r11
     df2:	ff 77       	andi	r31, 0x7F	; 127
     df4:	3f 2e       	mov	r3, r31
     df6:	36 fe       	sbrs	r3, 6
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <vfprintf+0x2ca>
     dfa:	23 2d       	mov	r18, r3
     dfc:	2e 7f       	andi	r18, 0xFE	; 254
     dfe:	a2 2e       	mov	r10, r18
     e00:	89 14       	cp	r8, r9
     e02:	58 f4       	brcc	.+22     	; 0xe1a <vfprintf+0x2d0>
     e04:	34 fe       	sbrs	r3, 4
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <vfprintf+0x2d4>
     e08:	32 fc       	sbrc	r3, 2
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x2d4>
     e0c:	83 2d       	mov	r24, r3
     e0e:	8e 7e       	andi	r24, 0xEE	; 238
     e10:	a8 2e       	mov	r10, r24
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <vfprintf+0x2d4>
     e14:	b8 2c       	mov	r11, r8
     e16:	a3 2c       	mov	r10, r3
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x2d6>
     e1a:	b8 2c       	mov	r11, r8
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <vfprintf+0x2d6>
     e1e:	b9 2c       	mov	r11, r9
     e20:	a4 fe       	sbrs	r10, 4
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <vfprintf+0x2f8>
     e24:	fe 01       	movw	r30, r28
     e26:	e8 0d       	add	r30, r8
     e28:	f1 1d       	adc	r31, r1
     e2a:	80 81       	ld	r24, Z
     e2c:	80 33       	cpi	r24, 0x30	; 48
     e2e:	21 f4       	brne	.+8      	; 0xe38 <vfprintf+0x2ee>
     e30:	9a 2d       	mov	r25, r10
     e32:	99 7e       	andi	r25, 0xE9	; 233
     e34:	a9 2e       	mov	r10, r25
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <vfprintf+0x300>
     e38:	a2 fe       	sbrs	r10, 2
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x2fe>
     e3c:	b3 94       	inc	r11
     e3e:	b3 94       	inc	r11
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <vfprintf+0x300>
     e42:	8a 2d       	mov	r24, r10
     e44:	86 78       	andi	r24, 0x86	; 134
     e46:	09 f0       	breq	.+2      	; 0xe4a <vfprintf+0x300>
     e48:	b3 94       	inc	r11
     e4a:	a3 fc       	sbrc	r10, 3
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <vfprintf+0x326>
     e4e:	a0 fe       	sbrs	r10, 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x314>
     e52:	b2 14       	cp	r11, r2
     e54:	88 f4       	brcc	.+34     	; 0xe78 <vfprintf+0x32e>
     e56:	28 0c       	add	r2, r8
     e58:	92 2c       	mov	r9, r2
     e5a:	9b 18       	sub	r9, r11
     e5c:	0e c0       	rjmp	.+28     	; 0xe7a <vfprintf+0x330>
     e5e:	b2 14       	cp	r11, r2
     e60:	60 f4       	brcc	.+24     	; 0xe7a <vfprintf+0x330>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     e6c:	b3 94       	inc	r11
     e6e:	f7 cf       	rjmp	.-18     	; 0xe5e <vfprintf+0x314>
     e70:	b2 14       	cp	r11, r2
     e72:	18 f4       	brcc	.+6      	; 0xe7a <vfprintf+0x330>
     e74:	2b 18       	sub	r2, r11
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <vfprintf+0x332>
     e78:	98 2c       	mov	r9, r8
     e7a:	21 2c       	mov	r2, r1
     e7c:	a4 fe       	sbrs	r10, 4
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <vfprintf+0x356>
     e80:	b6 01       	movw	r22, r12
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     e8a:	a2 fe       	sbrs	r10, 2
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <vfprintf+0x372>
     e8e:	a1 fc       	sbrc	r10, 1
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <vfprintf+0x34e>
     e92:	88 e7       	ldi	r24, 0x78	; 120
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <vfprintf+0x352>
     e98:	88 e5       	ldi	r24, 0x58	; 88
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	b6 01       	movw	r22, r12
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <vfprintf+0x36e>
     ea0:	8a 2d       	mov	r24, r10
     ea2:	86 78       	andi	r24, 0x86	; 134
     ea4:	59 f0       	breq	.+22     	; 0xebc <vfprintf+0x372>
     ea6:	a1 fe       	sbrs	r10, 1
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x364>
     eaa:	8b e2       	ldi	r24, 0x2B	; 43
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <vfprintf+0x366>
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	a7 fc       	sbrc	r10, 7
     eb2:	8d e2       	ldi	r24, 0x2D	; 45
     eb4:	b6 01       	movw	r22, r12
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     ebc:	89 14       	cp	r8, r9
     ebe:	38 f4       	brcc	.+14     	; 0xece <vfprintf+0x384>
     ec0:	b6 01       	movw	r22, r12
     ec2:	80 e3       	ldi	r24, 0x30	; 48
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     eca:	9a 94       	dec	r9
     ecc:	f7 cf       	rjmp	.-18     	; 0xebc <vfprintf+0x372>
     ece:	8a 94       	dec	r8
     ed0:	f3 01       	movw	r30, r6
     ed2:	e8 0d       	add	r30, r8
     ed4:	f1 1d       	adc	r31, r1
     ed6:	80 81       	ld	r24, Z
     ed8:	b6 01       	movw	r22, r12
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     ee0:	81 10       	cpse	r8, r1
     ee2:	f5 cf       	rjmp	.-22     	; 0xece <vfprintf+0x384>
     ee4:	22 20       	and	r2, r2
     ee6:	09 f4       	brne	.+2      	; 0xeea <vfprintf+0x3a0>
     ee8:	42 ce       	rjmp	.-892    	; 0xb6e <vfprintf+0x24>
     eea:	b6 01       	movw	r22, r12
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 9c 07 	call	0xf38	; 0xf38 <fputc>
     ef4:	2a 94       	dec	r2
     ef6:	f6 cf       	rjmp	.-20     	; 0xee4 <vfprintf+0x39a>
     ef8:	f6 01       	movw	r30, r12
     efa:	86 81       	ldd	r24, Z+6	; 0x06
     efc:	97 81       	ldd	r25, Z+7	; 0x07
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <vfprintf+0x3ba>
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	2b 96       	adiw	r28, 0x0b	; 11
     f06:	e2 e1       	ldi	r30, 0x12	; 18
     f08:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__>

00000f0c <strnlen_P>:
     f0c:	fc 01       	movw	r30, r24
     f0e:	05 90       	lpm	r0, Z+
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	70 40       	sbci	r23, 0x00	; 0
     f14:	01 10       	cpse	r0, r1
     f16:	d8 f7       	brcc	.-10     	; 0xf0e <strnlen_P+0x2>
     f18:	80 95       	com	r24
     f1a:	90 95       	com	r25
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31
     f20:	08 95       	ret

00000f22 <strnlen>:
     f22:	fc 01       	movw	r30, r24
     f24:	61 50       	subi	r22, 0x01	; 1
     f26:	70 40       	sbci	r23, 0x00	; 0
     f28:	01 90       	ld	r0, Z+
     f2a:	01 10       	cpse	r0, r1
     f2c:	d8 f7       	brcc	.-10     	; 0xf24 <strnlen+0x2>
     f2e:	80 95       	com	r24
     f30:	90 95       	com	r25
     f32:	8e 0f       	add	r24, r30
     f34:	9f 1f       	adc	r25, r31
     f36:	08 95       	ret

00000f38 <fputc>:
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	fb 01       	movw	r30, r22
     f42:	23 81       	ldd	r18, Z+3	; 0x03
     f44:	21 fd       	sbrc	r18, 1
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <fputc+0x16>
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	9f ef       	ldi	r25, 0xFF	; 255
     f4c:	2c c0       	rjmp	.+88     	; 0xfa6 <fputc+0x6e>
     f4e:	22 ff       	sbrs	r18, 2
     f50:	16 c0       	rjmp	.+44     	; 0xf7e <fputc+0x46>
     f52:	46 81       	ldd	r20, Z+6	; 0x06
     f54:	57 81       	ldd	r21, Z+7	; 0x07
     f56:	24 81       	ldd	r18, Z+4	; 0x04
     f58:	35 81       	ldd	r19, Z+5	; 0x05
     f5a:	42 17       	cp	r20, r18
     f5c:	53 07       	cpc	r21, r19
     f5e:	44 f4       	brge	.+16     	; 0xf70 <fputc+0x38>
     f60:	a0 81       	ld	r26, Z
     f62:	b1 81       	ldd	r27, Z+1	; 0x01
     f64:	9d 01       	movw	r18, r26
     f66:	2f 5f       	subi	r18, 0xFF	; 255
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	31 83       	std	Z+1, r19	; 0x01
     f6c:	20 83       	st	Z, r18
     f6e:	8c 93       	st	X, r24
     f70:	26 81       	ldd	r18, Z+6	; 0x06
     f72:	37 81       	ldd	r19, Z+7	; 0x07
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	37 83       	std	Z+7, r19	; 0x07
     f7a:	26 83       	std	Z+6, r18	; 0x06
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <fputc+0x6e>
     f7e:	8b 01       	movw	r16, r22
     f80:	ec 01       	movw	r28, r24
     f82:	fb 01       	movw	r30, r22
     f84:	00 84       	ldd	r0, Z+8	; 0x08
     f86:	f1 85       	ldd	r31, Z+9	; 0x09
     f88:	e0 2d       	mov	r30, r0
     f8a:	09 95       	icall
     f8c:	89 2b       	or	r24, r25
     f8e:	e1 f6       	brne	.-72     	; 0xf48 <fputc+0x10>
     f90:	d8 01       	movw	r26, r16
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	8d 91       	ld	r24, X+
     f96:	9c 91       	ld	r25, X
     f98:	17 97       	sbiw	r26, 0x07	; 7
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	17 96       	adiw	r26, 0x07	; 7
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	16 97       	sbiw	r26, 0x06	; 6
     fa4:	ce 01       	movw	r24, r28
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <__ultoa_invert>:
     fb0:	fa 01       	movw	r30, r20
     fb2:	aa 27       	eor	r26, r26
     fb4:	28 30       	cpi	r18, 0x08	; 8
     fb6:	51 f1       	breq	.+84     	; 0x100c <__ultoa_invert+0x5c>
     fb8:	20 31       	cpi	r18, 0x10	; 16
     fba:	81 f1       	breq	.+96     	; 0x101c <__ultoa_invert+0x6c>
     fbc:	e8 94       	clt
     fbe:	6f 93       	push	r22
     fc0:	6e 7f       	andi	r22, 0xFE	; 254
     fc2:	6e 5f       	subi	r22, 0xFE	; 254
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	af 4f       	sbci	r26, 0xFF	; 255
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	3e d0       	rcall	.+124    	; 0x104c <__ultoa_invert+0x9c>
     fd0:	b4 e0       	ldi	r27, 0x04	; 4
     fd2:	3c d0       	rcall	.+120    	; 0x104c <__ultoa_invert+0x9c>
     fd4:	67 0f       	add	r22, r23
     fd6:	78 1f       	adc	r23, r24
     fd8:	89 1f       	adc	r24, r25
     fda:	9a 1f       	adc	r25, r26
     fdc:	a1 1d       	adc	r26, r1
     fde:	68 0f       	add	r22, r24
     fe0:	79 1f       	adc	r23, r25
     fe2:	8a 1f       	adc	r24, r26
     fe4:	91 1d       	adc	r25, r1
     fe6:	a1 1d       	adc	r26, r1
     fe8:	6a 0f       	add	r22, r26
     fea:	71 1d       	adc	r23, r1
     fec:	81 1d       	adc	r24, r1
     fee:	91 1d       	adc	r25, r1
     ff0:	a1 1d       	adc	r26, r1
     ff2:	20 d0       	rcall	.+64     	; 0x1034 <__ultoa_invert+0x84>
     ff4:	09 f4       	brne	.+2      	; 0xff8 <__ultoa_invert+0x48>
     ff6:	68 94       	set
     ff8:	3f 91       	pop	r19
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	26 9f       	mul	r18, r22
     ffe:	11 24       	eor	r1, r1
    1000:	30 19       	sub	r19, r0
    1002:	30 5d       	subi	r19, 0xD0	; 208
    1004:	31 93       	st	Z+, r19
    1006:	de f6       	brtc	.-74     	; 0xfbe <__ultoa_invert+0xe>
    1008:	cf 01       	movw	r24, r30
    100a:	08 95       	ret
    100c:	46 2f       	mov	r20, r22
    100e:	47 70       	andi	r20, 0x07	; 7
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	41 93       	st	Z+, r20
    1014:	b3 e0       	ldi	r27, 0x03	; 3
    1016:	0f d0       	rcall	.+30     	; 0x1036 <__ultoa_invert+0x86>
    1018:	c9 f7       	brne	.-14     	; 0x100c <__ultoa_invert+0x5c>
    101a:	f6 cf       	rjmp	.-20     	; 0x1008 <__ultoa_invert+0x58>
    101c:	46 2f       	mov	r20, r22
    101e:	4f 70       	andi	r20, 0x0F	; 15
    1020:	40 5d       	subi	r20, 0xD0	; 208
    1022:	4a 33       	cpi	r20, 0x3A	; 58
    1024:	18 f0       	brcs	.+6      	; 0x102c <__ultoa_invert+0x7c>
    1026:	49 5d       	subi	r20, 0xD9	; 217
    1028:	31 fd       	sbrc	r19, 1
    102a:	40 52       	subi	r20, 0x20	; 32
    102c:	41 93       	st	Z+, r20
    102e:	02 d0       	rcall	.+4      	; 0x1034 <__ultoa_invert+0x84>
    1030:	a9 f7       	brne	.-22     	; 0x101c <__ultoa_invert+0x6c>
    1032:	ea cf       	rjmp	.-44     	; 0x1008 <__ultoa_invert+0x58>
    1034:	b4 e0       	ldi	r27, 0x04	; 4
    1036:	a6 95       	lsr	r26
    1038:	97 95       	ror	r25
    103a:	87 95       	ror	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__ultoa_invert+0x86>
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 05       	cpc	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	08 95       	ret
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	0a 2e       	mov	r0, r26
    1052:	06 94       	lsr	r0
    1054:	57 95       	ror	r21
    1056:	47 95       	ror	r20
    1058:	37 95       	ror	r19
    105a:	27 95       	ror	r18
    105c:	ba 95       	dec	r27
    105e:	c9 f7       	brne	.-14     	; 0x1052 <__ultoa_invert+0xa2>
    1060:	62 0f       	add	r22, r18
    1062:	73 1f       	adc	r23, r19
    1064:	84 1f       	adc	r24, r20
    1066:	95 1f       	adc	r25, r21
    1068:	a0 1d       	adc	r26, r0
    106a:	08 95       	ret

0000106c <__prologue_saves__>:
    106c:	2f 92       	push	r2
    106e:	3f 92       	push	r3
    1070:	4f 92       	push	r4
    1072:	5f 92       	push	r5
    1074:	6f 92       	push	r6
    1076:	7f 92       	push	r7
    1078:	8f 92       	push	r8
    107a:	9f 92       	push	r9
    107c:	af 92       	push	r10
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	ca 1b       	sub	r28, r26
    1096:	db 0b       	sbc	r29, r27
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	09 94       	ijmp

000010a4 <__epilogue_restores__>:
    10a4:	2a 88       	ldd	r2, Y+18	; 0x12
    10a6:	39 88       	ldd	r3, Y+17	; 0x11
    10a8:	48 88       	ldd	r4, Y+16	; 0x10
    10aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b6:	b9 84       	ldd	r11, Y+9	; 0x09
    10b8:	c8 84       	ldd	r12, Y+8	; 0x08
    10ba:	df 80       	ldd	r13, Y+7	; 0x07
    10bc:	ee 80       	ldd	r14, Y+6	; 0x06
    10be:	fd 80       	ldd	r15, Y+5	; 0x05
    10c0:	0c 81       	ldd	r16, Y+4	; 0x04
    10c2:	1b 81       	ldd	r17, Y+3	; 0x03
    10c4:	aa 81       	ldd	r26, Y+2	; 0x02
    10c6:	b9 81       	ldd	r27, Y+1	; 0x01
    10c8:	ce 0f       	add	r28, r30
    10ca:	d1 1d       	adc	r29, r1
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	ed 01       	movw	r28, r26
    10d8:	08 95       	ret

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
